public class org.apache.cassandra.utils.MerkleTrees extends java.lang.Object implements java.lang.Iterable
{
    public static final org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer serializer;
    private final java.util.Map merkleTrees;
    private final org.apache.cassandra.dht.IPartitioner partitioner;
    static final boolean $assertionsDisabled;
    public static org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer serializer$dryRun;
    public static boolean serializer$dryRun$setByDryRun;
    public java.util.Map merkleTrees$dryRun;
    public boolean merkleTrees$dryRun$setByDryRun;
    public org.apache.cassandra.dht.IPartitioner partitioner$dryRun;
    public boolean partitioner$dryRun$setByDryRun;

    public void <init>(org.apache.cassandra.dht.IPartitioner)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.IPartitioner r1;
        java.util.ArrayList $r2;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.IPartitioner;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection)>(r1, $r2);

        return;
    }

    private void <init>(org.apache.cassandra.dht.IPartitioner, java.util.Collection)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.TreeMap $r1;
        org.apache.cassandra.dht.IPartitioner r3;
        java.util.Collection r4;
        org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator $r2;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r3 := @parameter0: org.apache.cassandra.dht.IPartitioner;

        r4 := @parameter1: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        $r2 = new org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator;

        specialinvoke $r2.<org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: void <init>(org.apache.cassandra.utils.MerkleTrees$1)>(null);

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r2);

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees> = $r1;

        r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner> = r3;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void addTrees(java.util.Collection)>(r4);

        return;
    }

    public java.util.Collection ranges()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r1;
        java.util.Collection local4;
        java.util.Set $r2;
        boolean local3;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local3 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local3 == 0 goto label1;

        local4 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Collection ranges$instrumentation()>();

        return local4;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public org.apache.cassandra.dht.IPartitioner partitioner()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.IPartitioner $r1, local3;
        boolean local2;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local2 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local2 == 0 goto label1;

        local3 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$instrumentation()>();

        return local3;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        return $r1;
    }

    public void addMerkleTrees(int, java.util.Collection)
    {
        org.apache.cassandra.utils.MerkleTrees r4;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.cassandra.dht.Range r3;
        int i0;
        java.lang.Object $r2;
        boolean $z0, local7;

        r4 := @this: org.apache.cassandra.utils.MerkleTrees;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Collection;

        local7 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local7 == 0 goto label1;

        specialinvoke r4.<org.apache.cassandra.utils.MerkleTrees: void addMerkleTrees$instrumentation(int,java.util.Collection)>(i0, r0);

        return;

     label1:
        goto label2;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cassandra.dht.Range) $r2;

        virtualinvoke r4.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,org.apache.cassandra.dht.Range)>(i0, r3);

        goto label3;

     label4:
        return;
    }

    public org.apache.cassandra.utils.MerkleTree addMerkleTree(int, org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        int i0;
        org.apache.cassandra.utils.MerkleTree $r2, local5;
        org.apache.cassandra.dht.Range r1;
        boolean local4;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.cassandra.dht.Range;

        local4 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local4 == 0 goto label1;

        local5 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree$instrumentation(int,org.apache.cassandra.dht.Range)>(i0, r1);

        return local5;

     label1:
        goto label2;

     label2:
        $r2 = virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,byte,org.apache.cassandra.dht.Range)>(i0, 126, r1);

        return $r2;
    }

    public org.apache.cassandra.utils.MerkleTree addMerkleTree(int, byte, org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        org.apache.cassandra.dht.Range r2;
        long $l2;
        byte b0;
        org.apache.cassandra.dht.IPartitioner $r3;
        int i1, $i3;
        org.apache.cassandra.utils.MerkleTree $r4, local9;
        boolean local8;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        i1 := @parameter0: int;

        b0 := @parameter1: byte;

        r2 := @parameter2: org.apache.cassandra.dht.Range;

        local8 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local8 == 0 goto label1;

        local9 = specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree$instrumentation(int,byte,org.apache.cassandra.dht.Range)>(i1, b0, r2);

        return local9;

     label1:
        goto label2;

     label2:
        $r4 = new org.apache.cassandra.utils.MerkleTree;

        $r3 = r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        $l2 = (long) i1;

        $i3 = (int) b0;

        specialinvoke $r4.<org.apache.cassandra.utils.MerkleTree: void <init>(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.dht.Range,int,long)>($r3, r2, $i3, $l2);

        specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: void addTree(org.apache.cassandra.utils.MerkleTree)>($r4);

        return $r4;
    }

    public org.apache.cassandra.utils.MerkleTree$TreeRange get(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTree$TreeRange $r3, local5;
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;
        org.apache.cassandra.utils.MerkleTree $r2;
        boolean local4;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        local4 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local4 == 0 goto label1;

        local5 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree$TreeRange get$instrumentation(org.apache.cassandra.dht.Token)>(r1);

        return local5;

     label1:
        goto label2;

     label2:
        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$TreeRange get(org.apache.cassandra.dht.Token)>(r1);

        return $r3;
    }

    public void init()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.cassandra.dht.Range r5;
        java.util.Map $r1;
        java.lang.Object $r4;
        boolean $z0, local7;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local7 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local7 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void init$instrumentation()>();

        return;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.dht.Range) $r4;

        virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void init(org.apache.cassandra.dht.Range)>(r5);

        goto label3;

     label4:
        return;
    }

    public void release()
    {
        java.util.function.Consumer $r3;
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r1, $r4;
        java.util.Collection $r2;
        boolean local5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local5 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local5 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void release$instrumentation()>();

        return;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <org.apache.cassandra.utils.MerkleTrees$release__849: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r2.<java.util.Collection: void forEach(java.util.function.Consumer)>($r3);

        $r4 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        return;
    }

    public void init(org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r2;
        org.apache.cassandra.utils.MerkleTree $r4;
        org.apache.cassandra.dht.Range r1;
        java.lang.Object $r3;
        boolean local5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        local5 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local5 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void init$instrumentation(org.apache.cassandra.dht.Range)>(r1);

        return;

     label1:
        goto label2;

     label2:
        $r2 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.cassandra.utils.MerkleTree) $r3;

        virtualinvoke $r4.<org.apache.cassandra.utils.MerkleTree: void init()>();

        return;
    }

    public boolean split(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;
        org.apache.cassandra.utils.MerkleTree $r2;
        boolean $z0, local4, local5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        local4 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local4 == 0 goto label1;

        local5 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: boolean split$instrumentation(org.apache.cassandra.dht.Token)>(r1);

        return local5;

     label1:
        goto label2;

     label2:
        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        $z0 = virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: boolean split(org.apache.cassandra.dht.Token)>(r1);

        return $z0;
    }

    public void invalidate(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;
        org.apache.cassandra.utils.MerkleTree $r2;
        boolean local3;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        local3 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local3 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void invalidate$instrumentation(org.apache.cassandra.dht.Token)>(r1);

        return;

     label1:
        goto label2;

     label2:
        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: void unsafeInvalidate(org.apache.cassandra.dht.Token)>(r1);

        return;
    }

    public org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r2;
        org.apache.cassandra.utils.MerkleTree $r4, local6;
        org.apache.cassandra.dht.Range r1;
        java.lang.Object $r3;
        boolean local5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        local5 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local5 == 0 goto label1;

        local6 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree$instrumentation(org.apache.cassandra.dht.Range)>(r1);

        return local6;

     label1:
        goto label2;

     label2:
        $r2 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.cassandra.utils.MerkleTree) $r3;

        return $r4;
    }

    public long size()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        long $l0, l1, local10;
        java.util.Map $r1;
        org.apache.cassandra.utils.MerkleTree r5;
        java.lang.Object $r4;
        boolean $z0, local9;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local9 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local9 == 0 goto label1;

        local10 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: long size$instrumentation()>();

        return local10;

     label1:
        goto label2;

     label2:
        l1 = 0L;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.utils.MerkleTree) $r4;

        $l0 = virtualinvoke r5.<org.apache.cassandra.utils.MerkleTree: long size()>();

        l1 = l1 + $l0;

        goto label3;

     label4:
        return l1;
    }

    public void maxsize(org.apache.cassandra.dht.Range, int)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.utils.MerkleTree $r2;
        int i0;
        org.apache.cassandra.dht.Range r1;
        long $l1;
        boolean local5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        i0 := @parameter1: int;

        local5 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local5 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void maxsize$instrumentation(org.apache.cassandra.dht.Range,int)>(r1, i0);

        return;

     label1:
        goto label2;

     label2:
        $r2 = virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Range)>(r1);

        $l1 = (long) i0;

        virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: void maxsize(long)>($l1);

        return;
    }

    private org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range r11;
        java.lang.AssertionError $r4;
        org.apache.cassandra.dht.Token r7;
        java.util.Map $r1, $r12;
        org.apache.cassandra.utils.MerkleTree $r14, local18;
        java.lang.String $r9;
        boolean $z0, $z1, local17;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Object $r10, $r13;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter0: org.apache.cassandra.dht.Token;

        local17 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local17 == 0 goto label1;

        local18 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree$instrumentation(org.apache.cassandra.dht.Token)>(r7);

        return local18;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.cassandra.dht.Range) $r10;

        $z1 = virtualinvoke r11.<org.apache.cassandra.dht.Range: boolean contains(org.apache.cassandra.dht.RingPosition)>(r7);

        if $z1 == 0 goto label4;

        $r12 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        $r14 = (org.apache.cassandra.utils.MerkleTree) $r13;

        return $r14;

     label4:
        goto label3;

     label5:
        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected tree for token ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;
    }

    private void addTrees(java.util.Collection)
    {
        org.apache.cassandra.utils.MerkleTrees r4;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.cassandra.utils.MerkleTree r3;
        java.lang.Object $r2;
        boolean $z0, local6;

        r4 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: java.util.Collection;

        local6 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local6 == 0 goto label1;

        specialinvoke r4.<org.apache.cassandra.utils.MerkleTrees: void addTrees$instrumentation(java.util.Collection)>(r0);

        return;

     label1:
        goto label2;

     label2:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cassandra.utils.MerkleTree) $r2;

        specialinvoke r4.<org.apache.cassandra.utils.MerkleTrees: void addTree(org.apache.cassandra.utils.MerkleTree)>(r3);

        goto label3;

     label4:
        return;
    }

    private void addTree(org.apache.cassandra.utils.MerkleTree)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range $r2, $r7;
        java.lang.AssertionError $r4;
        java.util.Map $r3;
        org.apache.cassandra.utils.MerkleTree r1;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r10;
        boolean $z0, $z1, local13;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.utils.MerkleTree;

        local13 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local13 == 0 goto label1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void addTree$instrumentation(org.apache.cassandra.utils.MerkleTree)>(r1);

        return;

     label1:
        goto label2;

     label2:
        $z0 = <org.apache.cassandra.utils.MerkleTrees: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $z1 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: boolean validateNonOverlapping(org.apache.cassandra.utils.MerkleTree)>(r1);

        if $z1 != 0 goto label3;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range [");

        $r7 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is intersecting an existing range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label3:
        $r3 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    private boolean validateNonOverlapping(org.apache.cassandra.utils.MerkleTree)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.cassandra.dht.Range r5, $r7;
        java.util.Map $r1;
        org.apache.cassandra.utils.MerkleTree r6;
        java.lang.Object $r4;
        boolean $z0, $z1, local10, local11;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r6 := @parameter0: org.apache.cassandra.utils.MerkleTree;

        local10 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local10 == 0 goto label1;

        local11 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: boolean validateNonOverlapping$instrumentation(org.apache.cassandra.utils.MerkleTree)>(r6);

        return local11;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.dht.Range) $r4;

        $r7 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        $z1 = virtualinvoke $r7.<org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Range)>(r5);

        if $z1 == 0 goto label4;

        return 0;

     label4:
        goto label3;

     label5:
        return 1;
    }

    public org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator rangeIterator()
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator $r0, local3;
        boolean local2;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        local2 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local2 == 0 goto label1;

        local3 = specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator rangeIterator$instrumentation()>();

        return local3;

     label1:
        goto label2;

     label2:
        $r0 = new org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator;

        specialinvoke $r0.<org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: void <init>(org.apache.cassandra.utils.MerkleTrees,org.apache.cassandra.utils.MerkleTrees$1)>(r1, null);

        return $r0;
    }

    public void logRowCountPerLeaf(org.slf4j.Logger)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        java.lang.Integer $r4;
        org.apache.cassandra.utils.EstimatedHistogram $r11;
        java.util.Map $r2, $r6;
        int $i0;
        org.apache.cassandra.utils.MerkleTree r10;
        java.lang.Boolean $r5;
        boolean $z0, $z1, local15;
        org.slf4j.Logger r0;
        java.util.Iterator $r8;
        java.util.Collection $r3, $r7;
        java.lang.Object $r9;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: org.slf4j.Logger;

        local15 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local15 == 0 goto label1;

        specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: void logRowCountPerLeaf$instrumentation(org.slf4j.Logger)>(r0);

        return;

     label1:
        goto label2;

     label2:
        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r0.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("FL, logRowCountPerLeaf, merkleTrees has {} trees, isDryRun is {}", $r4, $r5);

        $r6 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = virtualinvoke r10.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowCountPerLeaf()>();

        virtualinvoke $r11.<org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>(r0);

        goto label3;

     label4:
        return;
    }

    public void logRowSizePerLeaf(org.slf4j.Logger)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        java.lang.Integer $r4;
        org.apache.cassandra.utils.EstimatedHistogram $r11;
        java.util.Map $r2, $r6;
        int $i0;
        org.apache.cassandra.utils.MerkleTree r10;
        java.lang.Boolean $r5;
        boolean $z0, $z1, local15;
        org.slf4j.Logger r0;
        java.util.Iterator $r8;
        java.util.Collection $r3, $r7;
        java.lang.Object $r9;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: org.slf4j.Logger;

        local15 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local15 == 0 goto label1;

        specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: void logRowSizePerLeaf$instrumentation(org.slf4j.Logger)>(r0);

        return;

     label1:
        goto label2;

     label2:
        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r0.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("FL, logRowSizePerLeaf, merkleTrees has {} trees, isDryRun is {}", $r4, $r5);

        $r6 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = virtualinvoke r10.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowSizePerLeaf()>();

        virtualinvoke $r11.<org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>(r0);

        goto label3;

     label4:
        return;
    }

    public byte[] hash(org.apache.cassandra.dht.Range)
    {
        java.lang.Throwable $r14, $r15, $r16, r18;
        byte[] $r20, r21, local27;
        org.apache.cassandra.utils.MerkleTrees r1;
        java.io.ByteArrayOutputStream $r0;
        org.apache.cassandra.dht.Range r7, $r8;
        java.util.Map $r2;
        org.apache.cassandra.utils.MerkleTree $r10;
        boolean $z0, $z1, $z2, z3, local26;
        java.util.Map$Entry r19;
        org.apache.cassandra.utils.MerkleTree$Consumer $r11;
        java.util.Iterator $r4;
        java.util.Set $r3;
        java.io.IOException $r12;
        java.lang.RuntimeException $r13;
        java.lang.Object $r5, $r6, $r9;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter0: org.apache.cassandra.dht.Range;

        local26 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local26 == 0 goto label01;

        local27 = specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: byte[] hash$instrumentation(org.apache.cassandra.dht.Range)>(r7);

        return local27;

     label01:
        goto label02;

     label02:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        r18 = null;

     label03:
        z3 = 0;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (org.apache.cassandra.dht.Range) $r6;

        $z1 = virtualinvoke $r8.<org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Range)>(r7);

        if $z1 == 0 goto label05;

        $r9 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = staticinvoke <org.apache.cassandra.utils.MerkleTrees$lambda_hash_0__850: org.apache.cassandra.utils.MerkleTree$Consumer bootstrap$(java.io.ByteArrayOutputStream)>($r0);

        $z2 = virtualinvoke $r10.<org.apache.cassandra.utils.MerkleTree: boolean ifHashesRange(org.apache.cassandra.dht.Range,org.apache.cassandra.utils.MerkleTree$Consumer)>(r7, $r11);

        z3 = z3 | $z2;

     label05:
        goto label04;

     label06:
        if z3 == 0 goto label07;

        $r20 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        goto label08;

     label07:
        $r20 = null;

     label08:
        r21 = $r20;

     label09:
        if $r0 == null goto label11;

        goto label10;

     label10:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label11:
        return r21;

     label12:
        $r16 := @caughtexception;

        r18 = $r16;

        throw $r16;

     label13:
        $r15 := @caughtexception;

     label14:
        if $r0 == null goto label19;

        if r18 == null goto label18;

     label15:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label16:
        goto label19;

     label17:
        $r14 := @caughtexception;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label19;

     label18:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label19:
        throw $r15;

     label20:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to append merkle tree hash to result");

        throw $r13;

        catch java.lang.Throwable from label03 to label09 with label12;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label12 to label14 with label13;
        catch java.io.IOException from label02 to label11 with label20;
        catch java.io.IOException from label12 to label20 with label20;
    }

    public java.util.Iterator iterator()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3, local5;
        java.util.Map $r1;
        java.util.Set $r2;
        boolean local4;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local4 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local4 == 0 goto label1;

        local5 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Iterator iterator$instrumentation()>();

        return local5;

     label1:
        goto label2;

     label2:
        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public long rowCount()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        long $l0, l1, local10;
        java.util.Map $r1;
        org.apache.cassandra.utils.MerkleTree r5;
        java.lang.Object $r4;
        boolean $z0, local9;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        local9 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local9 == 0 goto label1;

        local10 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: long rowCount$instrumentation()>();

        return local10;

     label1:
        goto label2;

     label2:
        l1 = 0L;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.utils.MerkleTree) $r4;

        $l0 = virtualinvoke r5.<org.apache.cassandra.utils.MerkleTree: long rowCount()>();

        l1 = l1 + $l0;

        goto label3;

     label4:
        return l1;
    }

    public org.apache.cassandra.utils.MerkleTrees tryMoveOffHeap() throws java.io.IOException
    {
        org.apache.cassandra.utils.MerkleTrees r2, $r6, local17;
        java.util.Map $r3;
        org.apache.cassandra.utils.MerkleTree $r13, $r14;
        boolean $z0, local16;
        java.util.Map$Entry r10;
        java.util.Iterator $r5;
        java.util.Collection $r8;
        java.util.Set $r4;
        java.util.TreeMap $r0;
        org.apache.cassandra.dht.IPartitioner $r7;
        java.lang.Object $r9, $r11, $r12;
        org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator $r1;

        r2 := @this: org.apache.cassandra.utils.MerkleTrees;

        local16 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local16 == 0 goto label1;

        local17 = specialinvoke r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees tryMoveOffHeap$instrumentation()>();

        return local17;

     label1:
        goto label2;

     label2:
        $r0 = new java.util.TreeMap;

        $r1 = new org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator;

        specialinvoke $r1.<org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: void <init>(org.apache.cassandra.utils.MerkleTrees$1)>(null);

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        $r3 = r2.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.apache.cassandra.utils.MerkleTree) $r12;

        $r14 = virtualinvoke $r13.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree tryMoveOffHeap()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r14);

        goto label3;

     label4:
        $r6 = new org.apache.cassandra.utils.MerkleTrees;

        $r7 = r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        $r8 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r6.<org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection)>($r7, $r8);

        return $r6;
    }

    public static java.util.List difference(org.apache.cassandra.utils.MerkleTrees, org.apache.cassandra.utils.MerkleTrees)
    {
        org.apache.cassandra.utils.MerkleTrees r1, r7;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        org.apache.cassandra.dht.Range $r8;
        java.util.ArrayList $r0;
        java.util.List $r10, local13;
        java.util.Map $r2;
        org.apache.cassandra.utils.MerkleTree r6, $r9;
        java.lang.Object $r5;
        boolean $z0, local12;

        r1 := @parameter0: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter1: org.apache.cassandra.utils.MerkleTrees;

        local12 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        if local12 == 0 goto label1;

        local13 = staticinvoke <org.apache.cassandra.utils.MerkleTrees: java.util.List difference$instrumentation(org.apache.cassandra.utils.MerkleTrees,org.apache.cassandra.utils.MerkleTrees)>(r1, r7);

        return local13;

     label1:
        goto label2;

     label2:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.cassandra.utils.MerkleTree) $r5;

        $r8 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        $r9 = virtualinvoke r7.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Range)>($r8);

        $r10 = staticinvoke <org.apache.cassandra.utils.MerkleTree: java.util.List difference(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree)>(r6, $r9);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        goto label3;

     label4:
        return $r0;
    }

    public static void lambda$hash$0(java.io.ByteArrayOutputStream, org.apache.cassandra.utils.MerkleTree$Node) throws java.io.IOException
    {
        org.apache.cassandra.utils.MerkleTree$Node r1;
        byte[] $r2;
        java.io.ByteArrayOutputStream r0;

        r0 := @parameter0: java.io.ByteArrayOutputStream;

        r1 := @parameter1: org.apache.cassandra.utils.MerkleTree$Node;

        $r2 = interfaceinvoke r1.<org.apache.cassandra.utils.MerkleTree$Node: byte[] hash()>();

        virtualinvoke r0.<java.io.ByteArrayOutputStream: void write(byte[])>($r2);

        return;
    }

    static java.util.Map access$200(org.apache.cassandra.utils.MerkleTrees)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r1;

        r0 := @parameter0: org.apache.cassandra.utils.MerkleTrees;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        return $r1;
    }

    void <init>(org.apache.cassandra.dht.IPartitioner, java.util.Collection, org.apache.cassandra.utils.MerkleTrees$1)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.IPartitioner r1;
        java.util.Collection r2;
        org.apache.cassandra.utils.MerkleTrees$1 r3;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.IPartitioner;

        r2 := @parameter1: java.util.Collection;

        r3 := @parameter2: org.apache.cassandra.utils.MerkleTrees$1;

        specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer $r1;

        $r0 = class "Lorg/apache/cassandra/utils/MerkleTrees;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.cassandra.utils.MerkleTrees: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer;

        specialinvoke $r1.<org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer: void <init>()>();

        <org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTrees$MerkleTreesSerializer serializer> = $r1;

        return;
    }

    public java.util.Collection ranges$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Set $r2;
        java.util.Map $r1, localtmp_merkleTrees3, localtmp_merkleTrees$dryRun4, local6;
        java.lang.Object local7, local8, local9;
        boolean localisDefault_merkleTrees5;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        localtmp_merkleTrees3 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun4 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees5 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local7 = (java.lang.Object) localtmp_merkleTrees3;

        local8 = (java.lang.Object) localtmp_merkleTrees$dryRun4;

        local9 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local7, local8, localisDefault_merkleTrees5);

        local6 = (java.util.Map) local9;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local6;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public org.apache.cassandra.dht.IPartitioner partitioner$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.IPartitioner $r1, localtmp_partitioner2, localtmp_partitioner$dryRun3, local5;
        java.lang.Object local6, local7, local8;
        boolean localisDefault_partitioner4;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        localtmp_partitioner2 = r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        localtmp_partitioner$dryRun3 = r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        localisDefault_partitioner4 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun>;

        local6 = (java.lang.Object) localtmp_partitioner2;

        local7 = (java.lang.Object) localtmp_partitioner$dryRun3;

        local8 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local6, local7, localisDefault_partitioner4);

        local5 = (org.apache.cassandra.dht.IPartitioner) local8;

        r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun> = local5;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        return $r1;
    }

    public void addMerkleTrees$instrumentation(int, java.util.Collection)
    {
        org.apache.cassandra.utils.MerkleTrees r4;
        java.util.Iterator $r1;
        java.util.Collection r0;
        int i0;
        org.apache.cassandra.dht.Range r3;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.apache.cassandra.utils.MerkleTrees;

        i0 := @parameter0: int;

        r0 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cassandra.dht.Range) $r2;

        virtualinvoke r4.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,org.apache.cassandra.dht.Range)>(i0, r3);

        goto label1;

     label2:
        return;
    }

    public org.apache.cassandra.utils.MerkleTree addMerkleTree$instrumentation(int, org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        int i0;
        org.apache.cassandra.utils.MerkleTree $r2;
        org.apache.cassandra.dht.Range r1;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.cassandra.dht.Range;

        $r2 = virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree addMerkleTree(int,byte,org.apache.cassandra.dht.Range)>(i0, 126, r1);

        return $r2;
    }

    public org.apache.cassandra.utils.MerkleTree addMerkleTree$instrumentation(int, byte, org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        org.apache.cassandra.dht.Range r2;
        long $l2;
        byte b0;
        org.apache.cassandra.dht.IPartitioner $r3, localtmp_partitioner8, localtmp_partitioner$dryRun9, local11;
        int i1, $i3;
        org.apache.cassandra.utils.MerkleTree $r4;
        java.lang.Object local12, local13, local14;
        boolean localisDefault_partitioner10;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        i1 := @parameter0: int;

        b0 := @parameter1: byte;

        r2 := @parameter2: org.apache.cassandra.dht.Range;

        $r4 = new org.apache.cassandra.utils.MerkleTree;

        localtmp_partitioner8 = r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        localtmp_partitioner$dryRun9 = r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        localisDefault_partitioner10 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun>;

        local12 = (java.lang.Object) localtmp_partitioner8;

        local13 = (java.lang.Object) localtmp_partitioner$dryRun9;

        local14 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local12, local13, localisDefault_partitioner10);

        local11 = (org.apache.cassandra.dht.IPartitioner) local14;

        r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun> = local11;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun> = 1;

        $r3 = r1.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        $l2 = (long) i1;

        $i3 = (int) b0;

        specialinvoke $r4.<org.apache.cassandra.utils.MerkleTree: void <init>(org.apache.cassandra.dht.IPartitioner,org.apache.cassandra.dht.Range,int,long)>($r3, r2, $i3, $l2);

        specialinvoke r1.<org.apache.cassandra.utils.MerkleTrees: void addTree(org.apache.cassandra.utils.MerkleTree)>($r4);

        return $r4;
    }

    public org.apache.cassandra.utils.MerkleTree$TreeRange get$instrumentation(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTree$TreeRange $r3;
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;
        org.apache.cassandra.utils.MerkleTree $r2;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        $r3 = virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree$TreeRange get(org.apache.cassandra.dht.Token)>(r1);

        return $r3;
    }

    public void init$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.cassandra.dht.Range r5;
        java.util.Map $r1, localtmp_merkleTrees7, localtmp_merkleTrees$dryRun8, local10;
        java.lang.Object $r4, local11, local12, local13;
        boolean $z0, localisDefault_merkleTrees9;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        localtmp_merkleTrees7 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun8 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees9 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local11 = (java.lang.Object) localtmp_merkleTrees7;

        local12 = (java.lang.Object) localtmp_merkleTrees$dryRun8;

        local13 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local11, local12, localisDefault_merkleTrees9);

        local10 = (java.util.Map) local13;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local10;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.dht.Range) $r4;

        virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: void init(org.apache.cassandra.dht.Range)>(r5);

        goto label1;

     label2:
        return;
    }

    public void release$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Map $r1, $r4, localtmp_merkleTrees5, localtmp_merkleTrees$dryRun6, local8, localtmp_merkleTrees12, localtmp_merkleTrees$dryRun13, local15;
        boolean localisDefault_merkleTrees7, localisDefault_merkleTrees14;
        java.util.Collection $r2;
        java.util.function.Consumer $r3;
        java.lang.Object local9, local10, local11, local16, local17, local18;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        localtmp_merkleTrees5 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun6 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees7 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local9 = (java.lang.Object) localtmp_merkleTrees5;

        local10 = (java.lang.Object) localtmp_merkleTrees$dryRun6;

        local11 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local9, local10, localisDefault_merkleTrees7);

        local8 = (java.util.Map) local11;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local8;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = staticinvoke <org.apache.cassandra.utils.MerkleTrees$release__849: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r2.<java.util.Collection: void forEach(java.util.function.Consumer)>($r3);

        localtmp_merkleTrees12 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun13 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees14 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local16 = (java.lang.Object) localtmp_merkleTrees12;

        local17 = (java.lang.Object) localtmp_merkleTrees$dryRun13;

        local18 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local16, local17, localisDefault_merkleTrees14);

        local15 = (java.util.Map) local18;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local15;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r4 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        return;
    }

    public void init$instrumentation(org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range r1;
        java.util.Map $r2, localtmp_merkleTrees5, localtmp_merkleTrees$dryRun6, local8;
        org.apache.cassandra.utils.MerkleTree $r4;
        java.lang.Object $r3, local9, local10, local11;
        boolean localisDefault_merkleTrees7;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        localtmp_merkleTrees5 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun6 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees7 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local9 = (java.lang.Object) localtmp_merkleTrees5;

        local10 = (java.lang.Object) localtmp_merkleTrees$dryRun6;

        local11 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local9, local10, localisDefault_merkleTrees7);

        local8 = (java.util.Map) local11;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local8;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.cassandra.utils.MerkleTree) $r3;

        virtualinvoke $r4.<org.apache.cassandra.utils.MerkleTree: void init()>();

        return;
    }

    public boolean split$instrumentation(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;
        org.apache.cassandra.utils.MerkleTree $r2;
        boolean $z0;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        $z0 = virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: boolean split(org.apache.cassandra.dht.Token)>(r1);

        return $z0;
    }

    public void invalidate$instrumentation(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTree $r2;
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Token r1;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Token;

        $r2 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Token)>(r1);

        virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: void unsafeInvalidate(org.apache.cassandra.dht.Token)>(r1);

        return;
    }

    public org.apache.cassandra.utils.MerkleTree getMerkleTree$instrumentation(org.apache.cassandra.dht.Range)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range r1;
        java.util.Map $r2, localtmp_merkleTrees5, localtmp_merkleTrees$dryRun6, local8;
        org.apache.cassandra.utils.MerkleTree $r4;
        java.lang.Object $r3, local9, local10, local11;
        boolean localisDefault_merkleTrees7;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        localtmp_merkleTrees5 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun6 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees7 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local9 = (java.lang.Object) localtmp_merkleTrees5;

        local10 = (java.lang.Object) localtmp_merkleTrees$dryRun6;

        local11 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local9, local10, localisDefault_merkleTrees7);

        local8 = (java.util.Map) local11;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local8;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.apache.cassandra.utils.MerkleTree) $r3;

        return $r4;
    }

    public long size$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        long $l0, l1;
        java.util.Map $r1, localtmp_merkleTrees9, localtmp_merkleTrees$dryRun10, local12;
        org.apache.cassandra.utils.MerkleTree r5;
        boolean $z0, localisDefault_merkleTrees11;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.Object $r4, local13, local14, local15;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        l1 = 0L;

        localtmp_merkleTrees9 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun10 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees11 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local13 = (java.lang.Object) localtmp_merkleTrees9;

        local14 = (java.lang.Object) localtmp_merkleTrees$dryRun10;

        local15 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local13, local14, localisDefault_merkleTrees11);

        local12 = (java.util.Map) local15;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local12;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.utils.MerkleTree) $r4;

        $l0 = virtualinvoke r5.<org.apache.cassandra.utils.MerkleTree: long size()>();

        l1 = l1 + $l0;

        goto label1;

     label2:
        return l1;
    }

    public void maxsize$instrumentation(org.apache.cassandra.dht.Range, int)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.utils.MerkleTree $r2;
        int i0;
        org.apache.cassandra.dht.Range r1;
        long $l1;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.dht.Range;

        i0 := @parameter1: int;

        $r2 = virtualinvoke r0.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Range)>(r1);

        $l1 = (long) i0;

        virtualinvoke $r2.<org.apache.cassandra.utils.MerkleTree: void maxsize(long)>($l1);

        return;
    }

    private org.apache.cassandra.utils.MerkleTree getMerkleTree$instrumentation(org.apache.cassandra.dht.Token)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range r11;
        java.lang.AssertionError $r4;
        org.apache.cassandra.dht.Token r7;
        java.util.Map $r1, $r12, localtmp_merkleTrees17, localtmp_merkleTrees$dryRun18, local20, localtmp_merkleTrees24, localtmp_merkleTrees$dryRun25, local27;
        org.apache.cassandra.utils.MerkleTree $r14;
        java.lang.String $r9;
        boolean $z0, $z1, localisDefault_merkleTrees19, localisDefault_merkleTrees26;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.Object $r10, $r13, local21, local22, local23, local28, local29, local30;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter0: org.apache.cassandra.dht.Token;

        localtmp_merkleTrees17 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun18 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees19 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local21 = (java.lang.Object) localtmp_merkleTrees17;

        local22 = (java.lang.Object) localtmp_merkleTrees$dryRun18;

        local23 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local21, local22, localisDefault_merkleTrees19);

        local20 = (java.util.Map) local23;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local20;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.cassandra.dht.Range) $r10;

        $z1 = virtualinvoke r11.<org.apache.cassandra.dht.Range: boolean contains(org.apache.cassandra.dht.RingPosition)>(r7);

        if $z1 == 0 goto label2;

        localtmp_merkleTrees24 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun25 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees26 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local28 = (java.lang.Object) localtmp_merkleTrees24;

        local29 = (java.lang.Object) localtmp_merkleTrees$dryRun25;

        local30 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local28, local29, localisDefault_merkleTrees26);

        local27 = (java.util.Map) local30;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local27;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r12 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        $r14 = (org.apache.cassandra.utils.MerkleTree) $r13;

        return $r14;

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected tree for token ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r4;
    }

    private void addTrees$instrumentation(java.util.Collection)
    {
        org.apache.cassandra.utils.MerkleTrees r4;
        java.util.Iterator $r1;
        java.util.Collection r0;
        org.apache.cassandra.utils.MerkleTree r3;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cassandra.utils.MerkleTree) $r2;

        specialinvoke r4.<org.apache.cassandra.utils.MerkleTrees: void addTree(org.apache.cassandra.utils.MerkleTree)>(r3);

        goto label1;

     label2:
        return;
    }

    private void addTree$instrumentation(org.apache.cassandra.utils.MerkleTree)
    {
        java.util.Map $r3, localtmp_merkleTrees20, localtmp_merkleTrees$dryRun21, local23;
        boolean $z0, $z1, localisDefault_fullRange15, localisDefault_merkleTrees22, localisDefault_fullRange29;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range $r2, $r7, localtmp_fullRange13, localtmp_fullRange$dryRun14, local16, localtmp_fullRange27, localtmp_fullRange$dryRun28, local30;
        java.lang.AssertionError $r4;
        org.apache.cassandra.utils.MerkleTree r1;
        java.lang.String $r10;
        java.lang.Object local17, local18, local19, local24, local25, local26, local31, local32, local33;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r1 := @parameter0: org.apache.cassandra.utils.MerkleTree;

        $z0 = <org.apache.cassandra.utils.MerkleTrees: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<org.apache.cassandra.utils.MerkleTrees: boolean validateNonOverlapping(org.apache.cassandra.utils.MerkleTree)>(r1);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range [");

        localtmp_fullRange13 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        localtmp_fullRange$dryRun14 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        localisDefault_fullRange15 = r1.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun>;

        local17 = (java.lang.Object) localtmp_fullRange13;

        local18 = (java.lang.Object) localtmp_fullRange$dryRun14;

        local19 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local17, local18, localisDefault_fullRange15);

        local16 = (org.apache.cassandra.dht.Range) local19;

        r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun> = local16;

        r1.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun> = 1;

        $r7 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is intersecting an existing range");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>($r10);

        throw $r4;

     label1:
        localtmp_merkleTrees20 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun21 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees22 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local24 = (java.lang.Object) localtmp_merkleTrees20;

        local25 = (java.lang.Object) localtmp_merkleTrees$dryRun21;

        local26 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local24, local25, localisDefault_merkleTrees22);

        local23 = (java.util.Map) local26;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local23;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r3 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localtmp_fullRange27 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        localtmp_fullRange$dryRun28 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        localisDefault_fullRange29 = r1.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun>;

        local31 = (java.lang.Object) localtmp_fullRange27;

        local32 = (java.lang.Object) localtmp_fullRange$dryRun28;

        local33 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local31, local32, localisDefault_fullRange29);

        local30 = (org.apache.cassandra.dht.Range) local33;

        r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun> = local30;

        r1.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun> = 1;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        return;
    }

    private boolean validateNonOverlapping$instrumentation(org.apache.cassandra.utils.MerkleTree)
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        org.apache.cassandra.dht.Range r5, $r7, localtmp_fullRange17, localtmp_fullRange$dryRun18, local20;
        java.util.Map $r1, localtmp_merkleTrees10, localtmp_merkleTrees$dryRun11, local13;
        org.apache.cassandra.utils.MerkleTree r6;
        boolean $z0, $z1, localisDefault_merkleTrees12, localisDefault_fullRange19;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Object $r4, local14, local15, local16, local21, local22, local23;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        r6 := @parameter0: org.apache.cassandra.utils.MerkleTree;

        localtmp_merkleTrees10 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun11 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees12 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local14 = (java.lang.Object) localtmp_merkleTrees10;

        local15 = (java.lang.Object) localtmp_merkleTrees$dryRun11;

        local16 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local14, local15, localisDefault_merkleTrees12);

        local13 = (java.util.Map) local16;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local13;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.dht.Range) $r4;

        localtmp_fullRange17 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        localtmp_fullRange$dryRun18 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        localisDefault_fullRange19 = r6.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun>;

        local21 = (java.lang.Object) localtmp_fullRange17;

        local22 = (java.lang.Object) localtmp_fullRange$dryRun18;

        local23 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local21, local22, localisDefault_fullRange19);

        local20 = (org.apache.cassandra.dht.Range) local23;

        r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun> = local20;

        r6.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun> = 1;

        $r7 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        $z1 = virtualinvoke $r7.<org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Range)>(r5);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator rangeIterator$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator $r0;
        org.apache.cassandra.utils.MerkleTrees r1;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        $r0 = new org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator;

        specialinvoke $r0.<org.apache.cassandra.utils.MerkleTrees$TreeRangeIterator: void <init>(org.apache.cassandra.utils.MerkleTrees,org.apache.cassandra.utils.MerkleTrees$1)>(r1, null);

        return $r0;
    }

    public void logRowCountPerLeaf$instrumentation(org.slf4j.Logger)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        java.lang.Integer $r4;
        org.apache.cassandra.utils.EstimatedHistogram $r11;
        java.util.Map $r2, $r6, localtmp_merkleTrees15, localtmp_merkleTrees$dryRun16, local18, localtmp_merkleTrees22, localtmp_merkleTrees$dryRun23, local25;
        int $i0;
        org.apache.cassandra.utils.MerkleTree r10;
        java.lang.Boolean $r5;
        boolean $z0, $z1, localisDefault_merkleTrees17, localisDefault_merkleTrees24;
        org.slf4j.Logger r0;
        java.util.Iterator $r8;
        java.util.Collection $r3, $r7;
        java.lang.Object $r9, local19, local20, local21, local26, local27, local28;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: org.slf4j.Logger;

        localtmp_merkleTrees15 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun16 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees17 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local19 = (java.lang.Object) localtmp_merkleTrees15;

        local20 = (java.lang.Object) localtmp_merkleTrees$dryRun16;

        local21 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local19, local20, localisDefault_merkleTrees17);

        local18 = (java.util.Map) local21;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local18;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r0.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("FL, logRowCountPerLeaf, merkleTrees has {} trees, isDryRun is {}", $r4, $r5);

        localtmp_merkleTrees22 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun23 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees24 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local26 = (java.lang.Object) localtmp_merkleTrees22;

        local27 = (java.lang.Object) localtmp_merkleTrees$dryRun23;

        local28 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local26, local27, localisDefault_merkleTrees24);

        local25 = (java.util.Map) local28;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local25;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r6 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = virtualinvoke r10.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowCountPerLeaf()>();

        virtualinvoke $r11.<org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>(r0);

        goto label1;

     label2:
        return;
    }

    public void logRowSizePerLeaf$instrumentation(org.slf4j.Logger)
    {
        org.apache.cassandra.utils.MerkleTrees r1;
        java.lang.Integer $r4;
        org.apache.cassandra.utils.EstimatedHistogram $r11;
        java.util.Map $r2, $r6, localtmp_merkleTrees15, localtmp_merkleTrees$dryRun16, local18, localtmp_merkleTrees22, localtmp_merkleTrees$dryRun23, local25;
        int $i0;
        org.apache.cassandra.utils.MerkleTree r10;
        java.lang.Boolean $r5;
        boolean $z0, $z1, localisDefault_merkleTrees17, localisDefault_merkleTrees24;
        org.slf4j.Logger r0;
        java.util.Iterator $r8;
        java.util.Collection $r3, $r7;
        java.lang.Object $r9, local19, local20, local21, local26, local27, local28;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r0 := @parameter0: org.slf4j.Logger;

        localtmp_merkleTrees15 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun16 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees17 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local19 = (java.lang.Object) localtmp_merkleTrees15;

        local20 = (java.lang.Object) localtmp_merkleTrees$dryRun16;

        local21 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local19, local20, localisDefault_merkleTrees17);

        local18 = (java.util.Map) local21;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local18;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <org.apache.cassandra.utils.dryrun.TraceUtil: boolean isDryRun()>();

        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r0.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("FL, logRowSizePerLeaf, merkleTrees has {} trees, isDryRun is {}", $r4, $r5);

        localtmp_merkleTrees22 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun23 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees24 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local26 = (java.lang.Object) localtmp_merkleTrees22;

        local27 = (java.lang.Object) localtmp_merkleTrees$dryRun23;

        local28 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local26, local27, localisDefault_merkleTrees24);

        local25 = (java.util.Map) local28;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local25;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r6 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = virtualinvoke r10.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.EstimatedHistogram histogramOfRowSizePerLeaf()>();

        virtualinvoke $r11.<org.apache.cassandra.utils.EstimatedHistogram: void log(org.slf4j.Logger)>(r0);

        goto label1;

     label2:
        return;
    }

    public byte[] hash$instrumentation(org.apache.cassandra.dht.Range)
    {
        byte[] $r20, r21;
        java.util.Map $r2, localtmp_merkleTrees26, localtmp_merkleTrees$dryRun27, local29;
        boolean $z0, $z1, $z2, z3, localisDefault_merkleTrees28;
        org.apache.cassandra.utils.MerkleTree$Consumer $r11;
        java.util.Set $r3;
        java.lang.Throwable $r14, $r15, $r16, r18;
        org.apache.cassandra.utils.MerkleTrees r1;
        java.io.ByteArrayOutputStream $r0;
        org.apache.cassandra.dht.Range r7, $r8;
        org.apache.cassandra.utils.MerkleTree $r10;
        java.util.Map$Entry r19;
        java.util.Iterator $r4;
        java.io.IOException $r12;
        java.lang.RuntimeException $r13;
        java.lang.Object $r5, $r6, $r9, local30, local31, local32;

        r1 := @this: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter0: org.apache.cassandra.dht.Range;

     label01:
        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        r18 = null;

     label02:
        z3 = 0;

        localtmp_merkleTrees26 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun27 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees28 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local30 = (java.lang.Object) localtmp_merkleTrees26;

        local31 = (java.lang.Object) localtmp_merkleTrees$dryRun27;

        local32 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local30, local31, localisDefault_merkleTrees28);

        local29 = (java.util.Map) local32;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local29;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label05;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r5;

        $r6 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r8 = (org.apache.cassandra.dht.Range) $r6;

        $z1 = virtualinvoke $r8.<org.apache.cassandra.dht.Range: boolean intersects(org.apache.cassandra.dht.Range)>(r7);

        if $z1 == 0 goto label04;

        $r9 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (org.apache.cassandra.utils.MerkleTree) $r9;

        $r11 = staticinvoke <org.apache.cassandra.utils.MerkleTrees$lambda_hash_0__850: org.apache.cassandra.utils.MerkleTree$Consumer bootstrap$(java.io.ByteArrayOutputStream)>($r0);

        $z2 = virtualinvoke $r10.<org.apache.cassandra.utils.MerkleTree: boolean ifHashesRange(org.apache.cassandra.dht.Range,org.apache.cassandra.utils.MerkleTree$Consumer)>(r7, $r11);

        z3 = z3 | $z2;

     label04:
        goto label03;

     label05:
        if z3 == 0 goto label06;

        $r20 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        goto label07;

     label06:
        $r20 = null;

     label07:
        r21 = $r20;

     label08:
        if $r0 == null goto label10;

        goto label09;

     label09:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label10:
        return r21;

     label11:
        $r16 := @caughtexception;

        r18 = $r16;

        throw $r16;

     label12:
        $r15 := @caughtexception;

     label13:
        if $r0 == null goto label18;

        if r18 == null goto label17;

     label14:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label15:
        goto label18;

     label16:
        $r14 := @caughtexception;

        virtualinvoke r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r14);

        goto label18;

     label17:
        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void close()>();

     label18:
        throw $r15;

     label19:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unable to append merkle tree hash to result");

        throw $r13;

        catch java.lang.Throwable from label02 to label08 with label11;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label11 to label13 with label12;
        catch java.io.IOException from label01 to label10 with label19;
        catch java.io.IOException from label11 to label19 with label19;
    }

    public java.util.Iterator iterator$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.Map $r1, localtmp_merkleTrees4, localtmp_merkleTrees$dryRun5, local7;
        java.lang.Object local8, local9, local10;
        boolean localisDefault_merkleTrees6;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        localtmp_merkleTrees4 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun5 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees6 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local8 = (java.lang.Object) localtmp_merkleTrees4;

        local9 = (java.lang.Object) localtmp_merkleTrees$dryRun5;

        local10 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local8, local9, localisDefault_merkleTrees6);

        local7 = (java.util.Map) local10;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local7;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }

    public long rowCount$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r0;
        long $l0, l1;
        java.util.Map $r1, localtmp_merkleTrees9, localtmp_merkleTrees$dryRun10, local12;
        org.apache.cassandra.utils.MerkleTree r5;
        boolean $z0, localisDefault_merkleTrees11;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.lang.Object $r4, local13, local14, local15;

        r0 := @this: org.apache.cassandra.utils.MerkleTrees;

        l1 = 0L;

        localtmp_merkleTrees9 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun10 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees11 = r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local13 = (java.lang.Object) localtmp_merkleTrees9;

        local14 = (java.lang.Object) localtmp_merkleTrees$dryRun10;

        local15 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local13, local14, localisDefault_merkleTrees11);

        local12 = (java.util.Map) local15;

        r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local12;

        r0.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r1 = r0.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.apache.cassandra.utils.MerkleTree) $r4;

        $l0 = virtualinvoke r5.<org.apache.cassandra.utils.MerkleTree: long rowCount()>();

        l1 = l1 + $l0;

        goto label1;

     label2:
        return l1;
    }

    public org.apache.cassandra.utils.MerkleTrees tryMoveOffHeap$instrumentation()
    {
        org.apache.cassandra.utils.MerkleTrees r2, $r6;
        java.util.Map $r3, localtmp_merkleTrees16, localtmp_merkleTrees$dryRun17, local19;
        org.apache.cassandra.utils.MerkleTree $r13, $r14;
        boolean $z0, localisDefault_merkleTrees18, localisDefault_partitioner25;
        java.util.Map$Entry r10;
        java.util.Iterator $r5;
        java.util.Collection $r8;
        java.util.Set $r4;
        java.util.TreeMap $r0;
        org.apache.cassandra.dht.IPartitioner $r7, localtmp_partitioner23, localtmp_partitioner$dryRun24, local26;
        java.lang.Object $r9, $r11, $r12, local20, local21, local22, local27, local28, local29;
        org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator $r1;

        r2 := @this: org.apache.cassandra.utils.MerkleTrees;

        $r0 = new java.util.TreeMap;

        $r1 = new org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator;

        specialinvoke $r1.<org.apache.cassandra.utils.MerkleTrees$TokenRangeComparator: void <init>(org.apache.cassandra.utils.MerkleTrees$1)>(null);

        specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1);

        localtmp_merkleTrees16 = r2.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun17 = r2.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees18 = r2.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local20 = (java.lang.Object) localtmp_merkleTrees16;

        local21 = (java.lang.Object) localtmp_merkleTrees$dryRun17;

        local22 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local20, local21, localisDefault_merkleTrees18);

        local19 = (java.util.Map) local22;

        r2.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local19;

        r2.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r3 = r2.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (org.apache.cassandra.utils.MerkleTree) $r12;

        $r14 = virtualinvoke $r13.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.utils.MerkleTree tryMoveOffHeap()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r14);

        goto label1;

     label2:
        $r6 = new org.apache.cassandra.utils.MerkleTrees;

        localtmp_partitioner23 = r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner>;

        localtmp_partitioner$dryRun24 = r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        localisDefault_partitioner25 = r2.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun>;

        local27 = (java.lang.Object) localtmp_partitioner23;

        local28 = (java.lang.Object) localtmp_partitioner$dryRun24;

        local29 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local27, local28, localisDefault_partitioner25);

        local26 = (org.apache.cassandra.dht.IPartitioner) local29;

        r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun> = local26;

        r2.<org.apache.cassandra.utils.MerkleTrees: boolean partitioner$dryRun$setByDryRun> = 1;

        $r7 = r2.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.dht.IPartitioner partitioner$dryRun>;

        $r8 = interfaceinvoke $r0.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r6.<org.apache.cassandra.utils.MerkleTrees: void <init>(org.apache.cassandra.dht.IPartitioner,java.util.Collection)>($r7, $r8);

        return $r6;
    }

    public static java.util.List difference$instrumentation(org.apache.cassandra.utils.MerkleTrees, org.apache.cassandra.utils.MerkleTrees)
    {
        org.apache.cassandra.utils.MerkleTrees r1, r7;
        org.apache.cassandra.dht.Range $r8, localtmp_fullRange19, localtmp_fullRange$dryRun20, local22;
        java.util.ArrayList $r0;
        java.util.Map $r2, localtmp_merkleTrees12, localtmp_merkleTrees$dryRun13, local15;
        org.apache.cassandra.utils.MerkleTree r6, $r9;
        boolean $z0, localisDefault_merkleTrees14, localisDefault_fullRange21;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.util.List $r10;
        java.lang.Object $r5, local16, local17, local18, local23, local24, local25;

        r1 := @parameter0: org.apache.cassandra.utils.MerkleTrees;

        r7 := @parameter1: org.apache.cassandra.utils.MerkleTrees;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        localtmp_merkleTrees12 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees>;

        localtmp_merkleTrees$dryRun13 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        localisDefault_merkleTrees14 = r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun>;

        local16 = (java.lang.Object) localtmp_merkleTrees12;

        local17 = (java.lang.Object) localtmp_merkleTrees$dryRun13;

        local18 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local16, local17, localisDefault_merkleTrees14);

        local15 = (java.util.Map) local18;

        r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun> = local15;

        r1.<org.apache.cassandra.utils.MerkleTrees: boolean merkleTrees$dryRun$setByDryRun> = 1;

        $r2 = r1.<org.apache.cassandra.utils.MerkleTrees: java.util.Map merkleTrees$dryRun>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.cassandra.utils.MerkleTree) $r5;

        localtmp_fullRange19 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange>;

        localtmp_fullRange$dryRun20 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        localisDefault_fullRange21 = r6.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun>;

        local23 = (java.lang.Object) localtmp_fullRange19;

        local24 = (java.lang.Object) localtmp_fullRange$dryRun20;

        local25 = staticinvoke <org.apache.cassandra.utils.dryrun.DryRunManager: java.lang.Object shallowCopy(java.lang.Object,java.lang.Object,boolean)>(local23, local24, localisDefault_fullRange21);

        local22 = (org.apache.cassandra.dht.Range) local25;

        r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun> = local22;

        r6.<org.apache.cassandra.utils.MerkleTree: boolean fullRange$dryRun$setByDryRun> = 1;

        $r8 = r6.<org.apache.cassandra.utils.MerkleTree: org.apache.cassandra.dht.Range fullRange$dryRun>;

        $r9 = virtualinvoke r7.<org.apache.cassandra.utils.MerkleTrees: org.apache.cassandra.utils.MerkleTree getMerkleTree(org.apache.cassandra.dht.Range)>($r8);

        $r10 = staticinvoke <org.apache.cassandra.utils.MerkleTree: java.util.List difference(org.apache.cassandra.utils.MerkleTree,org.apache.cassandra.utils.MerkleTree)>(r6, $r9);

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        goto label1;

     label2:
        return $r0;
    }
}
